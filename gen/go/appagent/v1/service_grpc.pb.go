// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: appagent/v1/service.proto

package appagentv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AppAgentService_Healthcheck_FullMethodName    = "/appagent.v1.AppAgentService/Healthcheck"
	AppAgentService_CreateServer_FullMethodName   = "/appagent.v1.AppAgentService/CreateServer"
	AppAgentService_RestartServer_FullMethodName  = "/appagent.v1.AppAgentService/RestartServer"
	AppAgentService_ShutdownServer_FullMethodName = "/appagent.v1.AppAgentService/ShutdownServer"
)

// AppAgentServiceClient is the client API for AppAgentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AppAgentServiceClient interface {
	Healthcheck(ctx context.Context, in *HealthcheckRequest, opts ...grpc.CallOption) (*HealthcheckResponse, error)
	CreateServer(ctx context.Context, in *CreateServerRequest, opts ...grpc.CallOption) (*CreateServerResponse, error)
	RestartServer(ctx context.Context, in *RestartServerRequest, opts ...grpc.CallOption) (*RestartServerResponse, error)
	ShutdownServer(ctx context.Context, in *ShutdownServerRequest, opts ...grpc.CallOption) (*ShutdownServerResponse, error)
}

type appAgentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAppAgentServiceClient(cc grpc.ClientConnInterface) AppAgentServiceClient {
	return &appAgentServiceClient{cc}
}

func (c *appAgentServiceClient) Healthcheck(ctx context.Context, in *HealthcheckRequest, opts ...grpc.CallOption) (*HealthcheckResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HealthcheckResponse)
	err := c.cc.Invoke(ctx, AppAgentService_Healthcheck_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appAgentServiceClient) CreateServer(ctx context.Context, in *CreateServerRequest, opts ...grpc.CallOption) (*CreateServerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateServerResponse)
	err := c.cc.Invoke(ctx, AppAgentService_CreateServer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appAgentServiceClient) RestartServer(ctx context.Context, in *RestartServerRequest, opts ...grpc.CallOption) (*RestartServerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RestartServerResponse)
	err := c.cc.Invoke(ctx, AppAgentService_RestartServer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appAgentServiceClient) ShutdownServer(ctx context.Context, in *ShutdownServerRequest, opts ...grpc.CallOption) (*ShutdownServerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ShutdownServerResponse)
	err := c.cc.Invoke(ctx, AppAgentService_ShutdownServer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AppAgentServiceServer is the server API for AppAgentService service.
// All implementations must embed UnimplementedAppAgentServiceServer
// for forward compatibility.
type AppAgentServiceServer interface {
	Healthcheck(context.Context, *HealthcheckRequest) (*HealthcheckResponse, error)
	CreateServer(context.Context, *CreateServerRequest) (*CreateServerResponse, error)
	RestartServer(context.Context, *RestartServerRequest) (*RestartServerResponse, error)
	ShutdownServer(context.Context, *ShutdownServerRequest) (*ShutdownServerResponse, error)
	mustEmbedUnimplementedAppAgentServiceServer()
}

// UnimplementedAppAgentServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAppAgentServiceServer struct{}

func (UnimplementedAppAgentServiceServer) Healthcheck(context.Context, *HealthcheckRequest) (*HealthcheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Healthcheck not implemented")
}
func (UnimplementedAppAgentServiceServer) CreateServer(context.Context, *CreateServerRequest) (*CreateServerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateServer not implemented")
}
func (UnimplementedAppAgentServiceServer) RestartServer(context.Context, *RestartServerRequest) (*RestartServerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestartServer not implemented")
}
func (UnimplementedAppAgentServiceServer) ShutdownServer(context.Context, *ShutdownServerRequest) (*ShutdownServerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShutdownServer not implemented")
}
func (UnimplementedAppAgentServiceServer) mustEmbedUnimplementedAppAgentServiceServer() {}
func (UnimplementedAppAgentServiceServer) testEmbeddedByValue()                         {}

// UnsafeAppAgentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AppAgentServiceServer will
// result in compilation errors.
type UnsafeAppAgentServiceServer interface {
	mustEmbedUnimplementedAppAgentServiceServer()
}

func RegisterAppAgentServiceServer(s grpc.ServiceRegistrar, srv AppAgentServiceServer) {
	// If the following call pancis, it indicates UnimplementedAppAgentServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AppAgentService_ServiceDesc, srv)
}

func _AppAgentService_Healthcheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthcheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppAgentServiceServer).Healthcheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppAgentService_Healthcheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppAgentServiceServer).Healthcheck(ctx, req.(*HealthcheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppAgentService_CreateServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppAgentServiceServer).CreateServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppAgentService_CreateServer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppAgentServiceServer).CreateServer(ctx, req.(*CreateServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppAgentService_RestartServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RestartServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppAgentServiceServer).RestartServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppAgentService_RestartServer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppAgentServiceServer).RestartServer(ctx, req.(*RestartServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AppAgentService_ShutdownServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShutdownServerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppAgentServiceServer).ShutdownServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AppAgentService_ShutdownServer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppAgentServiceServer).ShutdownServer(ctx, req.(*ShutdownServerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AppAgentService_ServiceDesc is the grpc.ServiceDesc for AppAgentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AppAgentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "appagent.v1.AppAgentService",
	HandlerType: (*AppAgentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Healthcheck",
			Handler:    _AppAgentService_Healthcheck_Handler,
		},
		{
			MethodName: "CreateServer",
			Handler:    _AppAgentService_CreateServer_Handler,
		},
		{
			MethodName: "RestartServer",
			Handler:    _AppAgentService_RestartServer_Handler,
		},
		{
			MethodName: "ShutdownServer",
			Handler:    _AppAgentService_ShutdownServer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "appagent/v1/service.proto",
}
